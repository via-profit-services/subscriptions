// Type definitions for @via-profit-services/subscriptions
// Project: git@github.com:via-profit-services/subscriptions
// Definitions by: Via Profit <https://github.com/via-profit-services>
// Warning: This is not autogenerated definitions!

/// <reference types="node" />
declare module '@via-profit-services/core' {
  import { RedisPubSub } from 'graphql-redis-subscriptions';
  import { Redis } from 'ioredis';

  interface Context {

    /**
     * Already configured instance of Redis PubSub
     * @see: https://github.com/davidyaha/graphql-redis-subscriptions
     */
    pubsub: RedisPubSub;

    /**
     * Already configures instance of ioRedis
     * @see: https://github.com/luin/ioredis
     */
    redis: Redis;
  }
  
}

declare module '@via-profit-services/subscriptions' {
  import { LoggersCollection, Middleware, Context } from '@via-profit-services/core';
  import { RedisPubSub } from 'graphql-redis-subscriptions';
  import { SubscriptionServer } from 'subscriptions-transport-ws';
  import { RedisOptions, Redis } from 'ioredis';
  import { GraphQLSchema } from 'graphql';
  import http from 'http';

  export interface InitialProps {
    /**
     * Your HTTP server instance
     */
    server: http.Server;

    /**
     * Subscriptions endpoint \
     * \
     * Default: `/subscriptions`
     */
    endpoint?: string;
    /**
     * Redis configuration
     * @see: https://github.com/luin/ioredis/blob/master/API.md#new-redisport-host-options
     * \
     * Default: \
     * `host: "localhost"`\
     * `port: 6379`\
     * `password: ""`
     */
    redis?: RedisOptions;
  }

  export type Configuration = Required<InitialProps>;

  export type SubscriptionsMiddlewareFactory = (config: InitialProps) => Middleware;

  export type PubsubFactory = (config: RedisOptions, logger: LoggersCollection) => {
    pubsub: RedisPubSub;
    redis: Redis;
  };
  
  export type SubscriptionsFactory = (props: {
    schema: GraphQLSchema;
    server: http.Server;
    endpoint: string;
    context: Context;
  }) => SubscriptionServer;

  export const resolvers: any;
  export const typeDefs: string;

  /**
   * Subscriptions module Factory \
   * Use this function to get the graphql middleware\
   * Example:
   * ```ts
   * import * as core from '@via-profit-services/core';
   * import * as subscriptions from '@via-profit-services/subscriptions';
   * import { makeExecutableSchema } from '@graphql-tools/schema';
   * 
   * // init subscriptions middleware
   * const pubsubMiddleware = subscriptions.factory({ ... })
   *
   * // make GraphQL schema
   * const schema = makeExecutableSchema({
   *   typeDefs: [core.typeDefs, subscriptions.typeDefs],
   *   resolvers: [core.resolvers, subscriptions.resolvers],
   * });
   * 
   * // init application
   * const { viaProfitGraphql } = await core.factory({
   *   ...
   *   middleware: [pubsubMiddleware], // put subscriptions middleware here
   *   ...
   * })
   * ```
   */
  export const factory: SubscriptionsFactory;
}