// Type definitions for @via-profit-services/subscriptions
// Project: git@github.com:via-profit-services/subscriptions
// Definitions by: Via Profit <https://github.com/via-profit-services>
// Warning: This is not autogenerated definitions!

/// <reference types="node" />
declare module '@via-profit-services/core' {
  import { RedisPubSub } from 'graphql-redis-subscriptions';

  interface Context {

    /**
     * Already configured instance of Redis PubSub
     * @see: https://github.com/davidyaha/graphql-redis-subscriptions
     */
    pubsub: RedisPubSub;
  }  
}


declare module '@via-profit-services/subscriptions' {
  import { LoggersCollection, Middleware, Context } from '@via-profit-services/core';
  import { RedisPubSub } from 'graphql-redis-subscriptions';
  import { RedisOptions } from 'ioredis';
  import { GraphQLSchema } from 'graphql';
  import { Extra } from 'graphql-ws/lib/use/ws';
  import { ServerOptions } from 'graphql-ws';
  import http from 'http';
  import WebSocket from 'ws';


  export interface Configuration
    extends Pick<
      ServerOptions<Extra & { context?: Context }>,
      | 'onConnect'
      | 'onDisconnect'
      | 'onClose'
      | 'onSubscribe'
      | 'onOperation'
      | 'onError'
      | 'onNext'
      | 'onComplete'
    > {
    /**
     * Your HTTP server instance
     */
    server: http.Server;

    /**
     * Subscriptions endpoint \
     * \
     * Default: `/subscriptions`
     */
    endpoint?: string;
    /**
     * Redis configuration
     * @see: https://github.com/luin/ioredis/blob/master/API.md#new-redisport-host-options
     * \
     * Default: \
     * `host: "localhost"`\
     * `port: 6379`\
     * `password: ""`
     */
    redis?: RedisOptions;
  }

  export type SubscriptionsMiddlewareFactory = (config: Configuration) => Middleware;

  export type PubsubFactory = (props: {
    context: Context,
    schema: GraphQLSchema,
    configuration:Configuration,
    logger: LoggersCollection
  }) => {
    pubsub: RedisPubSub,
    subscriptionServer: WebSocket.Server,
  };

  export type ResolverFn<Parent = any, Args = any> = (parent: Parent, args: Args, context: Context, info: any) => AsyncIterator<any>;
  export type FilterFn<Payload = any, Variables = any> = (payload: Payload, variables: Variables, context: Context, info?: any) => boolean | Promise<boolean>;

  export const resolvers: any;
  export const typeDefs: string;
  export const factory: SubscriptionsMiddlewareFactory;
  export const pubsubFilter: <Payload = any, Variables = any, Parent = any, Args = any>(
    asyncIteratorFn: ResolverFn<Parent, Args>,
    filterFn: FilterFn<Payload, Variables>,
  ) => ResolverFn<Parent, Args>;
}